// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package airplanes

import (
	"context"
	"sync"
)

var (
	lockAirplaneStorerMockAirplanes sync.RWMutex
)

// Ensure, that AirplaneStorerMock does implement AirplaneStorer.
// If this is not the case, regenerate this file with moq.
var _ AirplaneStorer = &AirplaneStorerMock{}

// AirplaneStorerMock is a mock implementation of AirplaneStorer.
//
//     func TestSomethingThatUsesAirplaneStorer(t *testing.T) {
//
//         // make and configure a mocked AirplaneStorer
//         mockedAirplaneStorer := &AirplaneStorerMock{
//             AirplanesFunc: func(ctx context.Context) ([]string, error) {
// 	               panic("mock out the Airplanes method")
//             },
//         }
//
//         // use mockedAirplaneStorer in code that requires AirplaneStorer
//         // and then make assertions.
//
//     }
type AirplaneStorerMock struct {
	// AirplanesFunc mocks the Airplanes method.
	AirplanesFunc func(ctx context.Context) ([]string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Airplanes holds details about calls to the Airplanes method.
		Airplanes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// Airplanes calls AirplanesFunc.
func (mock *AirplaneStorerMock) Airplanes(ctx context.Context) ([]string, error) {
	if mock.AirplanesFunc == nil {
		panic("AirplaneStorerMock.AirplanesFunc: method is nil but AirplaneStorer.Airplanes was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockAirplaneStorerMockAirplanes.Lock()
	mock.calls.Airplanes = append(mock.calls.Airplanes, callInfo)
	lockAirplaneStorerMockAirplanes.Unlock()
	return mock.AirplanesFunc(ctx)
}

// AirplanesCalls gets all the calls that were made to Airplanes.
// Check the length with:
//     len(mockedAirplaneStorer.AirplanesCalls())
func (mock *AirplaneStorerMock) AirplanesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockAirplaneStorerMockAirplanes.RLock()
	calls = mock.calls.Airplanes
	lockAirplaneStorerMockAirplanes.RUnlock()
	return calls
}
