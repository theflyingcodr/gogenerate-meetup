// This code was created by a generator {{ .Date }}
// CAUTION - If the generator is re-ran it will override the contents of this file

package {{ .Domain }}s

import (
	"encoding/json"
	"net/http"
	api "github.com/theflyingcodr/gogenerate-meetup/05-api-gen"
	"fmt"
)

type httpHandler struct{
	svc {{ .DomainTitle }}Service
}

// NewHttpHandler will setup and return an http handler for {{ .DomainTitle }}s.
func NewHttpHandler(svc {{ .DomainTitle }}Service) *httpHandler {
	return &httpHandler{svc:svc}
}

// Register will setup rest endpoints.
func (h *httpHandler) Register(){
	http.HandleFunc(api.Route{{ .DomainTitle }}s, h.{{ .DomainTitle }}s)
}

// {{ .DomainTitle }}s will handle http requests for {{ .DomainTitle }}s.
func (h *httpHandler) {{ .DomainTitle }}s(w http.ResponseWriter, r *http.Request) {
		w.Header().Add("content-type", "application/json")

	switch r.Method {
	case http.MethodGet:
		h.{{ .Domain }}s(w, r)
	case http.MethodPost:
		h.create(w, r)
	default:
		w.WriteHeader(http.StatusMethodNotAllowed)
	}

	return
}

func (h *httpHandler) {{ .Domain }}s(w http.ResponseWriter, r *http.Request) {
	resp, err := h.svc.{{ .DomainTitle }}s(r.Context())
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprint(w, err.Error())
		return
	}
	w.WriteHeader(http.StatusOK)
	if err := json.NewEncoder(w).Encode(resp); err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprint(w, err.Error())
	}
}

// create will handle http requests for adding {{ .DomainTitle }}s.
func (h *httpHandler) create(w http.ResponseWriter, r *http.Request) {
	var req {{ .DomainTitle }}
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprint(w, err.Error())
		return
	}
	resp, err := h.svc.{{ .DomainTitle }}Create(r.Context(), req)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprint(w, err.Error())
		return
	}
	w.WriteHeader(http.StatusCreated)
	if err := json.NewEncoder(w).Encode(resp); err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprint(w, err.Error())
	}
	return
}